import json
import re

from typing import Optional

from .launch_configuration import (
    LaunchConfiguration,
    LaunchConfigurationRequest,
    LaunchConfigurationType,
)


class LaunchJSON:
    def __init__(self, launch_json_path: str) -> None:
        self.launch_json_path = launch_json_path
        self.data = None
        self.configurations = dict()
        self.selected_configuration_name = None

        # the launch json generated by VS Code is malformed for the following reasons
        # // <- comments
        re_remove_comments = re.compile(r"//.*")

        lines = []

        with open(self.launch_json_path) as file:
            for line in file:
                # remove comments
                lines.append(re_remove_comments.sub("", line))

        cleaned_up_json_string = "\n".join(lines)

        self.data = json.loads(cleaned_up_json_string)

        # iterate over configurations
        if "configurations" in self.data.keys():
            for configuration in self.data["configurations"]:
                name = configuration["name"]
                type = LaunchConfigurationType(configuration["type"])
                request = LaunchConfigurationRequest(configuration["request"])
                module = configuration["module"]
                args = configuration["args"]

                self.configurations[name] = LaunchConfiguration(
                    name, type, request, module, args
                )

    def select_configuration(self, name: str) -> None:
        # check if configuration name exists
        if name in self.configurations.keys():
            self.selected_configuration_name = name

    def get_selected_configuration_run_command(self) -> Optional[str]:
        cmd = None
        if self.selected_configuration_name is not None:

            selected_configuration = self.configurations[
                self.selected_configuration_name
            ]

            # check if selected configuration is of type python
            if selected_configuration.type == LaunchConfigurationType.PYTHON:
                cmd = f"python -m {selected_configuration.module} {' '.join(selected_configuration.args)}"

        return cmd
